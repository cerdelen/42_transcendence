generator client {
	provider = "prisma-client-js"
	binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource backend_database {
	provider	= "postgresql"
	url			= env("DATABASE_URL")
}

// ? means a field is optional

model User {
	// User stuff
	id				Int			@unique
	name			String		@unique
	mail			String
	// picture			String?
	// 2_FA_stuff
	two_FA_enabled	Boolean    @default(false)
	two_FA_secret	String?
	friendlist		Int[]
	stats			Stats?
	games			Int[]				// ids of games??
}

model Stats {
	user			User		@relation(fields: [stat_id], references: [id])
	stat_id			Int			@unique 
	wins			Int			@default(0)
	loses			Int			@default(0)
	mmr				Int			@default(1500)
	achievement_0	Boolean		@default(false)										// win 3 games
	achievement_1	Boolean		@default(false)										// reach 1700 mmr
	achievement_2	Boolean		@default(false)										// win to zero
}

model Chat {
	// User stuff
	id				Int			@unique  @id @default(autoincrement()) 
	chat_name		String?		
	chat_msg		Message[]
	//something to consider later after creating chat
	is_public		Boolean		@default(true)
	pass_protected	Boolean		@default(false)
	password		String?		
	chat_members	Int[]
	chat_owner		Int
	chat_admins		Int[] 
	black_list		Int[]
	mute_list		Int[]
}

model Message {
	// User stuff
	msg_id				Int			@unique  @id @default(autoincrement()) 
	user_id				Int			@default(0) 
	user_name			String		@default("default_name")
	text				String
	created_at			DateTime	@default(now())
	//necessary fro array of messages in Chat model
	chat_id				Int?			
	chat				Chat?		@relation(fields: [chat_id], references: [id])
}

model Game {
	id					Int @unique @id @default(autoincrement())
	player_one			Int
	player_two			Int
	winner				Int
	loser				Int
	score_one			Int
	score_two			Int
	finished			Boolean		@default(false)
}